
plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
    id 'org.jetbrains.dokka'
}

group = 'com.github.asiankoala'

android {
    compileSdk 29

    defaultConfig {
        minSdk 24
        targetSdk 29
        versionCode 1
        versionName "1.0"

//        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
        ndk{
            abiFilters 'armeabi-v7a'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
            version "3.22.1"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

}

afterEvaluate {
    publishing {
        publications {
            productionRelease(MavenPublication) {
                from components.release
                groupId = 'com.github.asiankoala'
                artifactId = 'koawalib'
                version = '1.6.0'
            }
        }
    }
    generateReleaseBuildConfig.enabled = false
    generateDebugBuildConfig.enabled = false
    generateReleaseResValues.enabled = false
    generateDebugResValues.enabled = false
}

configurations {
    ktlint
    downloadHeader
    downloadSo
}

dependencies {
    repositories {
        maven { url = 'https://maven.brott.dev/' }
        maven { url = 'https://jitpack.io' }
        maven { url "https://kotlin.bintray.com/kotlin-datascience" }
        maven {
            url = uri("https://maven.pkg.github.com/Cheeseboy8020/librealsense")
            credentials {
                username = "Cheseboy8020"
                password = "ghp_"+"gQo4CeGf32bIRJsD2nKTqdU8Qu8wPF2dZu9B"
            }
        }
    }

    //noinspection GradleDependency
    compileOnly 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    compileOnly 'org.jetbrains.lets-plot:lets-plot-kotlin-jvm:3.1.1'
    compileOnly 'org.jetbrains.lets-plot:lets-plot-image-export:2.1.0'
    compileOnly 'org.firstinspires.ftc:RobotCore:8.0.0'
    implementation 'org.ejml:ejml-all:0.41'
    compileOnly 'com.acmerobotics.dashboard:dashboard:0.4.7'
    compileOnly 'org.openftc:easyopencv:1.6.0'
    implementation 'com.github.Eeshwar-Krishnan:PhotonFTC:v2.0.1'
    compileOnly 'org.apache.commons:commons-math3:3.6.1'
    compileOnly 'com.acmerobotics.roadrunner:core:0.5.6'
    def version = '2.53.1-robotroopers.1'
    downloadSo 'com.intel.realsense:librealsense:' + version + '@aar'
    implementation 'com.intel.realsense:librealsense:' + version + '@aar'
    downloadHeader 'com.intel.realsense:librealsense:' + version + '@zip'


    ktlint("com.pinterest:ktlint:0.42.1") {
        attributes {
            attribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))
        }
    }
}

task extractHeaders(type: Sync) {
    dependsOn configurations.downloadHeader
    from { configurations.downloadHeader.collect { zipTree(it) } }
    into "$projectDir/src/main/cpp/include/librealsense2/"
}


task extractSo(type: Sync) {
    dependsOn configurations.downloadSo
    from { configurations.downloadSo.collect { zipTree(it) } }
    include("jni/**")
    into "$buildDir/"
}

preBuild.dependsOn(extractHeaders)
preBuild.dependsOn(extractSo)

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt"
}

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "**/*.kt"
}

tasks.withType(dokkaHtml.getClass()).configureEach {
    pluginsMapConfiguration.set(
            ["org.jetbrains.dokka.base.DokkaBase": """{ "separateInheritedMembers": true}"""]
    )
}

tasks.dokkaHtml.configure {
    outputDirectory.set(file("../docs/"))
}

